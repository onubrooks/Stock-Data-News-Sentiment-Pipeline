[2024-10-30T15:05:10.649+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2024-10-30T15:05:10.671+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: Predice-Stock-ML-Pipeline.run_ml_workload manual__2024-10-30T14:27:23.134497+00:00 [queued]>
[2024-10-30T15:05:10.677+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: Predice-Stock-ML-Pipeline.run_ml_workload manual__2024-10-30T14:27:23.134497+00:00 [queued]>
[2024-10-30T15:05:10.677+0000] {taskinstance.py:2306} INFO - Starting attempt 5 of 5
[2024-10-30T15:05:10.685+0000] {taskinstance.py:2330} INFO - Executing <Task(PythonOperator): run_ml_workload> on 2024-10-30 14:27:23.134497+00:00
[2024-10-30T15:05:10.696+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=3872) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2024-10-30T15:05:10.698+0000] {standard_task_runner.py:63} INFO - Started process 3889 to run task
[2024-10-30T15:05:10.697+0000] {standard_task_runner.py:90} INFO - Running: ['***', 'tasks', 'run', 'Predice-Stock-ML-Pipeline', 'run_ml_workload', 'manual__2024-10-30T14:27:23.134497+00:00', '--job-id', '325', '--raw', '--subdir', 'DAGS_FOLDER/stock_and_sentiment_ml_pipeline.py', '--cfg-path', '/tmp/tmpo8v59oyb']
[2024-10-30T15:05:10.701+0000] {standard_task_runner.py:91} INFO - Job 325: Subtask run_ml_workload
[2024-10-30T15:05:10.715+0000] {logging_mixin.py:188} WARNING - /home/***/.local/lib/python3.12/site-packages/***/settings.py:195 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2024-10-30T15:05:10.752+0000] {task_command.py:426} INFO - Running <TaskInstance: Predice-Stock-ML-Pipeline.run_ml_workload manual__2024-10-30T14:27:23.134497+00:00 [running]> on host cf1c99cdc1a8
[2024-10-30T15:05:11.075+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='Predice-Stock-ML-Pipeline' AIRFLOW_CTX_TASK_ID='run_ml_workload' AIRFLOW_CTX_EXECUTION_DATE='2024-10-30T14:27:23.134497+00:00' AIRFLOW_CTX_TRY_NUMBER='5' AIRFLOW_CTX_DAG_RUN_ID='manual__2024-10-30T14:27:23.134497+00:00'
[2024-10-30T15:05:11.076+0000] {taskinstance.py:430} INFO - ::endgroup::
[2024-10-30T15:05:11.195+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2024-10-30T15:05:11.197+0000] {taskinstance.py:2905} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 465, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 432, in _execute_callable
    return execute_callable(context=context, **execute_callable_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 401, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 235, in execute
    return_value = self.execute_callable()
                   ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 252, in execute_callable
    return self.python_callable(*self.op_args, **self.op_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/utils/ml_pipeline_helper.py", line 71, in run_ml
    model_lr, model_rf = train_model(merged_data)
                         ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/utils/ml_pipeline_helper.py", line 44, in train_model
    model_lr.fit(X_train, y_train)
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/linear_model/_base.py", line 609, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
        ^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/home/airflow/.local/lib/python3.12/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
[2024-10-30T15:05:11.211+0000] {taskinstance.py:1206} INFO - Marking task as FAILED. dag_id=Predice-Stock-ML-Pipeline, task_id=run_ml_workload, run_id=manual__2024-10-30T14:27:23.134497+00:00, execution_date=20241030T142723, start_date=20241030T150510, end_date=20241030T150511
[2024-10-30T15:05:11.221+0000] {standard_task_runner.py:110} ERROR - Failed to execute job 325 for task run_ml_workload (Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values; 3889)
[2024-10-30T15:05:11.277+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 1
[2024-10-30T15:05:11.297+0000] {taskinstance.py:3503} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2024-10-30T15:05:11.301+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
